// frontend/src/ui/patterns/FloatingChipWheel.jsx

import React, { useMemo, useRef, useState, useEffect, useLayoutEffect } from 'react';
import { twMerge } from 'tailwind-merge';
import { pokerSkin } from '@/ui/skins/wheels/pokerSkin';
import { AccordionPill } from '@/ui/patterns/AccordionPill';

/**
 * FloatingChipWheel ‚Äî –∫—Ä—É–≥–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –¥—É–≥–æ–≤—ã–º —Å–≤–∞–π–ø–æ–º –∏ —Å–Ω–∞–ø–æ–º.
 *
 * –ï–î–ò–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –ü–†–ê–í–î–´:
 *  ‚Ä¢ –í–æ –≤—Ä–µ–º—è –∂–µ—Å—Ç–∞ ¬´–ø—Ä–∞–≤–¥–∞¬ª = snapCandidateRef (—Ç–æ, —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ).
 *  ‚Ä¢ –û—Ç–ø—É—Å—Ç–∏–ª–∏ –ø–∞–ª–µ—Ü ‚Äî –∫–æ–º–º–∏—Ç–∏–º committedStepRef –∏ –∫–æ–ª–µ—Å–æ –¥–æ—Å–Ω–∞–ø–∏–≤–∞–µ—Ç—Å—è.
 *  ‚Ä¢ –í–Ω–µ—à–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ–∫–∞ –∏–¥—ë—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ/–∞–Ω–∏–º–∞—Ü–∏—è/settle.
 *
 * –£–≥–æ–ª –∏–∫–æ–Ω–∫–∏: angle = center + (logicalStep - stepF) * stepDeg.
 */

export function FloatingChipWheel({
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // üì¶ –î–ê–ù–ù–´–ï / API
  items = [],           // –º–∞—Å—Å–∏–≤ { id, label, icon | Icon }
  activeId,             // id –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏ (–≤–Ω–µ—à–Ω—è—è –ø—Ä–∞–≤–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  onSelect,             // (id) => void ‚Äî —Å–æ–æ–±—â–∞–µ–º –Ω–∞—Ä—É–∂—É –≤—ã–±–æ—Ä —à–∞–≥–∞

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // üìç –†–ê–ó–ú–ï–©–ï–ù–ò–ï
  dock = 'br',          // 'br' | 'bl' | 'tr' | 'tl'
  offset = { x: -36, y: -15 }, // —Å–º–µ—â–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ –æ—Ç —É–≥–ª–∞ (px)
  hideOnDesktop = true, // —Å–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ ‚â•sm
  className = '',       // –¥–æ–ø. –∫–ª–∞—Å—Å—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // üìê –ì–ï–û–ú–ï–¢–†–ò–Ø / –í–ò–ó–£–ê–õ
  size = 230,           // ‚åÄ —Ñ–∏—à–∫–∏ (px)
  radius = 99,          // —Ä–∞–¥–∏—É—Å –¥–æ—Ä–æ–∂–∫–∏ –∏–∫–æ–Ω–æ–∫ (px)
  centerAngle,          // —É–≥–æ–ª ¬´—Ü–µ–Ω—Ç—Ä–∞¬ª (deg); –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∏–∑ dock
  stepDeg,              // —à–∞–≥ –º–µ–∂–¥—É –∏–∫–æ–Ω–∫–∞–º–∏ (deg); –∏–Ω–∞—á–µ 360/N
  iconSize = 17,        // —Ä–∞–∑–º–µ—Ä –≥–ª–∏—Ñ–∞ –∏–∫–æ–Ω–∫–∏ (px)
  chipSize = 25,        // —Ä–∞–∑–º–µ—Ä —Å–ª–æ—Ç–∞ –∏–∫–æ–Ω–∫–∏ (px)
  labelOffset = { x: -12, y: -18 }, // —Å–º–µ—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç –≥–µ–æ-—Ü–µ–Ω—Ç—Ä–∞ (px)
  labelClassName = '',  // –¥–æ–ø. –∫–ª–∞—Å—Å—ã –ø–æ–¥–ø–∏—Å–∏

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‚úã –ñ–ï–°–¢–´ / –ü–û–í–ï–î–ï–ù–ò–ï
  enableSwipe = true,   // –≤–∫–ª—é—á–∏—Ç—å —Å–≤–∞–π–ø –ø–æ –¥—É–≥–µ
  deadzonePx = 6,       // –ø–æ—Ä–æ–≥ —Å—Ç–∞—Ä—Ç–∞ –¥—Ä–∞–≥–∞ (deg)
  snapDurationMs = 160, // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ¬´–¥–æ–≤–æ–¥–∫–∏¬ª (ms)
  showDragIndicator = true, // –¥—É–≥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç—è–≥–∏–≤–∞–Ω–∏–∏ (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–∫–∏–Ω–æ–≤)

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // üîî –û–¢–ö–õ–ò–ö
  haptics = 'auto',         // true | false | 'auto' ‚Äî 'auto' –≤–∫–ª—é—á–∞–µ—Ç vibrate(8) –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ API
  sound = false,            // false | { src, volume?: number } ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —â–µ–ª—á–æ–∫ –ø—Ä–∏ —Å–Ω–∞–ø–µ

  soundMaster = 0.5,        // 0..1 ‚Äî –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ (–¥–æ–ø. –∞—Ç—Ç–µ–Ω—é–∞—Ç–æ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω –Ω–∞ iOS)

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // üîò –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–ê–Ø –ü–û–î–ü–ò–°–¨
  enableLabelMenu = true,   // –≤–∫–ª—é—á–∏—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ü–∏–π –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ª–µ–π–±–ª
  menuMaxHeight = '38vh',   // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –º–µ–Ω—é
  onMenuOpen,               // () => void ‚Äî –∫–æ–ª–±–µ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é
  onMenuClose,              // () => void ‚Äî –∫–æ–ª–±–µ–∫ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é




  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // ‚öôÔ∏è –í–ê–†–ò–ê–ù–¢ –ú–ï–ù–Æ –ü–û–î–ü–ò–°–ò
  labelMenuVariant = 'panel',   // 'panel' | 'compact' | 'accordion'
  compactMaxItems = 6,          // –º–∞–∫—Å–∏–º—É–º –ø—É–Ω–∫—Ç–æ–≤ –≤ –∫–æ–º–ø–∞–∫—Ç-—Å–ø–∏—Å–∫–µ (–æ—Å—Ç–∞–≤—å 6; –º–æ–∂–Ω–æ Infinity –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ)
  compactOrder = 'clockwise',   // 'clockwise' | 'original' ‚Äî –ø–æ—Ä—è–¥–æ–∫ –ø—É–Ω–∫—Ç–æ–≤
  compactDirection = 'auto',    // 'up' | 'down' | 'auto'
  // compactAlign = 'center',      // 'center' (–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ; –Ω–∞ –±—É–¥—É—â–µ–µ: 'start'|'end')
  compactGutter = 8,            // –æ—Ç—Å—Ç—É–ø –æ—Ç –ø–∏–ª—é–ª–∏ –¥–æ –∫–æ–º–ø–∞–∫—Ç-—Å–ø–∏—Å–∫–∞ (px)
  compactItemHeight = 40,       // –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–º–ø–∞–∫—Ç-—Å–ø–∏—Å–∫–µ (px) ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤


  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // üé® –°–ö–ò–ù
  skin = 'poker',       // 'glass' | 'poker'
  skinProps = {},       // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∏–Ω–∞ (—Ü–≤–µ—Ç–∞/—à–∏—Ä–∏–Ω—ã/—Ü–µ–Ω—Ç—Ä/–∞–∫—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–∫–æ–Ω–∫–∏ –∏ –ø—Ä.)
}) {
  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const clean = useMemo(() => items.filter(Boolean), [items]);
  const N = clean.length;

  const autoStep = 360 / N;
  const step = typeof stepDeg === 'number' ? stepDeg : autoStep;

  const defaultCenter = { br: 215, bl: 325, tr: 145, tl: 35 }[dock] ?? 215;
  const center = typeof centerAngle === 'number' ? centerAngle : defaultCenter;

  const anchor = {
    br: { corner: 'bottom-0 right-0', tx: +1, ty: +1 },
    bl: { corner: 'bottom-0 left-0',  tx: -1, ty: +1 },
    tr: { corner: 'top-0 right-0',    tx: +1, ty: -1 },
    tl: { corner: 'top-0 left-0',     tx: -1, ty: -1 },
  }[dock];

  const translate = `translate(calc(${anchor.tx * 50}% + ${anchor.tx * (offset?.x ?? 0)}px),
                                calc(${anchor.ty * 50}% + ${anchor.ty * (offset?.y ?? 0)}px))`;

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã ‚Äî stepF (–¥—Ä–æ–±–Ω—ã–π —à–∞–≥)
  const [stepFState, setStepFState] = useState(0);
  const stepF = useRef(0);
  const setStepF = (v) => { stepF.current = v; setStepFState(v); };

  const snapCandidateRef = useRef(0);    // –±–ª–∏–∂–∞–π—à–∏–π —Ü–µ–ª—ã–π ¬´–ø–æ–¥ –ø–∞–ª—å—Ü–µ–º¬ª
  const committedStepRef = useRef(null); // –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–≥ –Ω–∞ –≤—Ä–µ–º—è —Å–Ω–∞–ø–∞

  // –í–≤–æ–¥/–∞–Ω–∏–º–∞—Ü–∏—è
  const rootRef = useRef(null);
  const draggingRef = useRef(false);
  const startedRef = useRef(false);
  const startAngleRef = useRef(0);
  const startStepRef = useRef(0);

  const rafRef = useRef(null);
  const [animating, setAnimating] = useState(false);

  // Web Audio (—Å–∏–Ω—Ç–µ–∑)
  const audioCtxRef = useRef(null);     // AudioContext
  const masterGainRef = useRef(null);   // –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  const tickGainRef = useRef(null);     // —É—Ä–æ–≤–µ–Ω—å "tick"
  const snapGainRef = useRef(null);     // —É—Ä–æ–≤–µ–Ω—å "snap"

  // –¢–∏–∫–∏ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–¥–µ —Ü–µ–ª—ã—Ö —à–∞–≥–æ–≤
  const lastIntRef = useRef(null);      // –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —à–∞–≥
  const lastTickTimeRef = useRef(0);
  const TICK_COOLDOWN_MS = 60;          // –∞–Ω—Ç–∏-—Å–ø–∞–º –¥–ª—è —Ç–∏–∫–æ–≤



  const hasUserInteractedRef = useRef(false); // –±—ã–ª –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const audioArmedRef = useRef(false);       // AudioContext —Å–æ–∑–¥–∞–Ω/—Ä–∞–∑–±—É–∂–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –∂–µ—Å—Ç–∞


  // –û—Ç–∫–ª–∏–∫: –∑–≤—É–∫ + —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥

  const lastSnapTickRef = useRef(0);        // timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
  const SNAP_FEEDBACK_MIN_MS = 120;         // —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –æ—Ç–∫–ª–∏–∫–∞


  // –õ–æ–∫ –≤–Ω–µ—à–Ω–µ–π —Å–∏–Ω—Ö—Ä—ã –Ω–∞ –æ–∂–∏–¥–∞–µ–º—ã–π id + settle-–ø–∞—É–∑–∞
  const lockTargetIdRef = useRef(null);
  const lockTimerRef = useRef(null);
  const interactionLockRef = useRef(false);
  const interactionTimerRef = useRef(null);
  const settleMs = 250;

  // –î–æ—Å—Ç—É–ø –∫ unlockBody –≤–Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∂–µ—Å—Ç–æ–≤
  const unlockBodyRef = useRef(() => {});

  // –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∫–æ–Ω–∫–∏ (–Ω—É–∂–µ–Ω –¥–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –º–µ–Ω—é)
  const currentIndex = useMemo(() => {
    const refStep =
      (committedStepRef.current !== null)
        ? committedStepRef.current
        : (draggingRef.current ? snapCandidateRef.current : Math.round(stepF.current));
    return ((refStep % N) + N) % N;
  }, [stepFState, N]);



  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const menuRef = useRef(null);
  const labelRef = useRef(null);

  // –û—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω-–ø–∏–ª—é–ª—è ‚Äî —á—Ç–æ–±—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∂–µ—Å—Ç—ã –∫–æ–ª–µ—Å–∞
  const [pillOpen, setPillOpen] = useState(false);

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ó–ê–ö–†–´–¢–û–ô –ø–∏–ª—é–ª–∏ (px), —á—Ç–æ–±—ã —Å–º–µ—â–∞—Ç—å —è–∫–æ—Ä—å –Ω–∞ +closedMax/2
  const [pillClosedMaxPx, setPillClosedMaxPx] = useState(null);




  // –≤—ã—Å–æ—Ç–∞ –ø–∏–ª—é–ª–∏ ‚Äî —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ ¬´–ø—Ä–∏–ª–∏–ø–∞–ª¬ª —Ç–æ—á–Ω–æ –∫ –Ω–µ–π
  const [labelH, setLabelH] = useState(0);

  useLayoutEffect(() => {
    if (labelRef.current) {
      setLabelH(labelRef.current.offsetHeight || 0);
    }
  }, [isMenuOpen, labelMenuVariant, labelClassName, labelOffset, currentIndex]);






  const menuId = `floating-wheel-menu-${Math.random().toString(36).substr(2, 9)}`;

  const pickStep = (s) => Math.round(s);


  // –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è (iOS –∑–≤—É—á–∏—Ç –≥—Ä–æ–º—á–µ ‚Äî —Å–ª–µ–≥–∫–∞ –ø—Ä–∏–≥–ª—É—à–∏–º)
  const isIOS = typeof navigator !== 'undefined'
    ? /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream
    : false;

  // –†–∞—Å—á—ë—Ç —É—Ä–æ–≤–Ω–µ–π —Å —É—á—ë—Ç–æ–º master –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const getLevels = () => {
    const master = typeof soundMaster === 'number' ? Math.max(0, Math.min(1, soundMaster)) : 0.5;
    const platform = isIOS ? 0.6 : 1.0; // –º—è–≥–∫–∏–π -4 dB –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–ª—è iOS
    const baseSnap = (sound && typeof sound.snap === 'number') ? sound.snap : 0.6;
    const baseTick = (sound && typeof sound.tick === 'number') ? sound.tick : 0.25;
    return {
      master: master * platform,
      snap: baseSnap * master * platform,
      tick: baseTick * master * platform,
    };
  };


  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioContext –∏ –≥–µ–π–Ω–æ–≤
  const ensureAudio = () => {
    if (audioCtxRef.current) return audioCtxRef.current;
    const Ctx = window.AudioContext || window.webkitAudioContext;
    if (!Ctx) return null;
    const ctx = new Ctx();

    const master = ctx.createGain();


    const L = getLevels();
    master.gain.value = L.master;


    master.connect(ctx.destination);

    const tickG = ctx.createGain();

    tickG.gain.value = getLevels().tick;


    tickG.connect(master);

    const snapG = ctx.createGain();

    snapG.gain.value = getLevels().snap;


    snapG.connect(master);

    audioCtxRef.current = ctx;
    masterGainRef.current = master;
    tickGainRef.current = tickG;
    snapGainRef.current = snapG;
    return ctx;
  };

  // –ù–µ–±–æ–ª—å—à–æ–π –∫–ª–∏–∫ —Å–∏–Ω—Ç–µ–∑–æ–º: –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π –∏–º–ø—É–ª—å—Å

  const synthClick = (type = 'snap') => {
    const ctx = audioCtxRef.current; // –Ω–µ —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å
    if (!ctx) return;



    // –≤—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const isSnap = type === 'snap';
    const freq   = isSnap ? 1900 : 2400; // –ì—Ü
    const durMs  = isSnap ? 28   : 16;   // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const gNode  = isSnap ? snapGainRef.current : tickGainRef.current;


    if (!gNode) return;
    // –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —â–µ–ª—á–æ–∫
    const L = getLevels();
    gNode.gain.value = (type === 'snap') ? L.snap : L.tick;


    const osc = ctx.createOscillator();
    osc.type = 'square';
    osc.frequency.setValueAtTime(freq, ctx.currentTime);

    const env = ctx.createGain();
    env.gain.setValueAtTime(1, ctx.currentTime);
    // –±—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø–∞–¥
    env.gain.exponentialRampToValueAtTime(0.001, ctx.currentTime + durMs / 1000);

    osc.connect(env).connect(gNode);
    osc.start();
    osc.stop(ctx.currentTime + durMs / 1000);
  };




  // –ú—è–≥–∫–∏–π –æ—Ç–∫–ª–∏–∫ (–≤–∏–±—Ä–æ + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–≤—É–∫) —Å —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º


  const playSnapFeedback = () => {
    const now = performance.now();
    // —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–≤—É–∫–∞ (snap –º–æ–∂–Ω–æ –±–µ–∑ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –æ–±—â–∏–π)
    if (now - (lastSnapTickRef.current || 0) < SNAP_FEEDBACK_MIN_MS) return;
    lastSnapTickRef.current = now;

    // Haptics ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –∏–Ω–∞—á–µ Intervention
    const wantHaptics = hasUserInteractedRef.current && (haptics === true || (haptics === 'auto' && 'vibrate' in navigator));
    if (wantHaptics) { try { navigator.vibrate?.(8); } catch {/* ignore haptics errors */} }

    // –ó–≤—É–∫ "snap" ‚Äî —Å–∏–Ω—Ç–µ–∑–æ–º, –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    synthClick('snap');


  };




  // –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–æ–ø—Å—ã sound/soundMaster
  // –í–ê–ñ–ù–û: –∑–¥–µ—Å—å –ù–ï–õ–¨–ó–Ø —Å–æ–∑–¥–∞–≤–∞—Ç—å AudioContext, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è—Ç—å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å.
  useEffect(() => {
    const ctx = audioCtxRef.current; // ‚Üê –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º ensureAudio()
    if (!ctx) return;
    const L = getLevels();
    if (masterGainRef.current) masterGainRef.current.gain.value = L.master;
    if (tickGainRef.current)   tickGainRef.current.gain.value   = L.tick;
    if (snapGainRef.current)   snapGainRef.current.gain.value   = L.snap;
  }, [sound, soundMaster]);




  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // –ê–Ω–∏–º–∞—Ü–∏—è
  const animateStepTo = (targetStep, durMs, onDone) => {
    if (rafRef.current) cancelAnimationFrame(rafRef.current);

    const start = stepF.current;
    const delta = targetStep - start;

    if (Math.abs(delta) < 1e-3 || durMs <= 0) {
      setStepF(targetStep);
      onDone?.();
      return;
    }

    setAnimating(true);
    const t0 = performance.now();

    const tick = (t) => {
      const p = Math.min(1, (t - t0) / durMs);
      const eased = 1 - Math.pow(1 - p, 3);
      setStepF(start + delta * eased);

      if (p < 1) {
        rafRef.current = requestAnimationFrame(tick);
      } else {
        rafRef.current = null;
        setStepF(targetStep);
        setAnimating(false);
        onDone?.();
      }
    };

    rafRef.current = requestAnimationFrame(tick);
  };

  const snapTo = (logicalStep) => {
    committedStepRef.current = logicalStep;

    const id = clean[((logicalStep % N) + N) % N]?.id || null;
    lockTargetIdRef.current = id;
    if (lockTimerRef.current) clearTimeout(lockTimerRef.current);
    lockTimerRef.current = setTimeout(() => {
      lockTargetIdRef.current = null;
      lockTimerRef.current = null;
    }, 1200);

    interactionLockRef.current = true;
    if (interactionTimerRef.current) clearTimeout(interactionTimerRef.current);

    // –ú—è–≥–∫–∏–π —â–µ–ª—á–æ–∫-—Å–Ω–∞–ø
    playSnapFeedback();


    if (id && id !== activeId) onSelect?.(id);

    animateStepTo(logicalStep, snapDurationMs, () => {
      interactionTimerRef.current = setTimeout(() => {
        interactionLockRef.current = false;
        committedStepRef.current = null;
        interactionTimerRef.current = null;
      }, settleMs);
    });
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ü–∏–π

  const openMenu = () => {
    if (!enableLabelMenu) return;
    if (draggingRef.current || startedRef.current) {
      draggingRef.current = false;
      startedRef.current = false;
      unlockBodyRef.current?.();
    }
    setIsMenuOpen(true);
    onMenuOpen?.();
  };

  const closeMenu = () => {
    if (!isMenuOpen) return;
    setIsMenuOpen(false);
    onMenuClose?.();
  };

  const handleLabelClick = (e) => {
    if (!enableLabelMenu || labelMenuVariant === 'accordion' || animating || draggingRef.current) return;
    e.stopPropagation();
    if (isMenuOpen) {
      closeMenu();
    } else {
      openMenu();
    }
  };

  const handleMenuItemClick = (targetIdx) => {
    if (!isMenuOpen || animating) return;
    closeMenu();

    // –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π —à–∞–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    const s = stepF.current;
    let best = targetIdx;
    let bestDist = Infinity;
    for (let k = -1; k <= 1; k++) {
      const cand = targetIdx + k * N;
      const dist = Math.abs(cand - s);
      if (dist < bestDist) { bestDist = dist; best = cand; }
    }

    snapTo(best);
  };

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // –ñ–µ—Å—Ç—ã
  useEffect(() => {
    const root = rootRef.current;
    if (!root) return;
    root.style.touchAction = 'none';
    return () => { root.style.touchAction = ''; };
  }, []);

  useEffect(() => {
    if (!enableSwipe) return;
    const root = rootRef.current;
    if (!root) return;

    let prevBodyTA = '';
    let prevOver = '';
    const lockBody = () => {
      prevBodyTA = document.body.style.touchAction || '';
      prevOver = document.body.style.overscrollBehaviorY || '';
      document.body.style.touchAction = 'none';
      document.body.style.overscrollBehaviorY = 'none';
    };
    const unlockBody = () => {
      document.body.style.touchAction = prevBodyTA;
      document.body.style.overscrollBehaviorY = prevOver;
    };

    // –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞—Ä—É–∂—É
    unlockBodyRef.current = unlockBody;



    const onDown = (e) => {
      if (animating || isMenuOpen || (labelMenuVariant === 'accordion' && pillOpen)) return;
      if (rafRef.current) cancelAnimationFrame(rafRef.current);


      root.setPointerCapture?.(e.pointerId);
      draggingRef.current = true;
      startedRef.current = false;

      const rect = root.getBoundingClientRect();
      const cx = rect.left + rect.width / 2;
      const cy = rect.top + rect.height / 2;

      startAngleRef.current = Math.atan2(e.clientY - cy, e.clientX - cx) * 180 / Math.PI;
      startStepRef.current = stepF.current;

      snapCandidateRef.current = pickStep(stepF.current);

      hasUserInteractedRef.current = true;
      lastIntRef.current = Math.floor(stepF.current);


      hasUserInteractedRef.current = true;



      // –†–∞–∑–±—É–¥–∏–º Web Audio —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–≤–æ–≥–æ –∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!audioArmedRef.current) {
        try {
          const ctx = ensureAudio();
          if (ctx && ctx.state !== 'running') {
            ctx.resume?.().catch(() => {});
          }
          audioArmedRef.current = true;
        } catch {/* ignore audio context errors */}
      }



    };

    const onMove = (e) => {
      if (!draggingRef.current || animating || isMenuOpen || (labelMenuVariant === 'accordion' && pillOpen)) return;

      const rect = root.getBoundingClientRect();
      const cx = rect.left + rect.width / 2;
      const cy = rect.top + rect.height / 2;
      const angNow = Math.atan2(e.clientY - cy, e.clientX - cx) * 180 / Math.PI;

      let deltaDeg = angNow - startAngleRef.current;
      if (deltaDeg > 180) deltaDeg -= 360;
      if (deltaDeg < -180) deltaDeg += 360;

      // –ø–æ —á–∞—Å–æ–≤–æ–π ‚Äî –≤–ø–µ—Ä—ë–¥ –ø–æ –ª–µ–Ω—Ç–µ
      deltaDeg = -deltaDeg;

      if (!startedRef.current) {
        if (Math.abs(deltaDeg) < deadzonePx) return;
        startedRef.current = true;
        lockBody();
      }

      e.preventDefault?.();

      const deltaStep = deltaDeg / step;
      const nextStepF = startStepRef.current + deltaStep;

      // "tick": –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–µ–ª—ã–π —à–∞–≥
      if (startedRef.current) {
        const nextInt = Math.floor(nextStepF);
        if (lastIntRef.current === null) lastIntRef.current = Math.floor(startStepRef.current);
        if (nextInt !== lastIntRef.current) {
          const tNow = performance.now();
          if (tNow - (lastTickTimeRef.current || 0) > TICK_COOLDOWN_MS) {
            synthClick('tick');

            lastTickTimeRef.current = tNow;
          }
          lastIntRef.current = nextInt;
        }
      }





      setStepF(nextStepF);
      snapCandidateRef.current = pickStep(nextStepF);
    };

    const onEnd = () => {
      if (!draggingRef.current || isMenuOpen) return;
      draggingRef.current = false;

      if (startedRef.current) {
        const targetStep = snapCandidateRef.current;
        snapTo(targetStep);
      }

      startedRef.current = false;
      unlockBody();
    };

    root.addEventListener('pointerdown', onDown, { passive: true });
    root.addEventListener('pointermove', onMove, { passive: false });
    root.addEventListener('pointerup', onEnd, { passive: false });
    root.addEventListener('pointercancel', onEnd, { passive: false });
    root.addEventListener('pointerleave', onEnd, { passive: false });

    return () => {
      root.removeEventListener('pointerdown', onDown);
      root.removeEventListener('pointermove', onMove);
      root.removeEventListener('pointerup', onEnd);
      root.removeEventListener('pointercancel', onEnd);
      root.removeEventListener('pointerleave', onEnd);
      // drop external unlock reference
      unlockBodyRef.current = () => {};
    };
  }, [enableSwipe, deadzonePx, snapDurationMs, step, N, clean, activeId, onSelect, animating, isMenuOpen, pillOpen, labelMenuVariant]);


  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
  useEffect(() => {
    if (!isMenuOpen) return;

    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        e.preventDefault();
        closeMenu();
      }
    };

    const handleClickOutside = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target) &&
          labelRef.current && !labelRef.current.contains(e.target)) {
        closeMenu();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('pointerdown', handleClickOutside, true);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('pointerdown', handleClickOutside, true);

    };
  }, [isMenuOpen]);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é
  useEffect(() => {
    if (!isMenuOpen || !menuRef.current) return;

    const activeElement = menuRef.current.querySelector('[data-active="true"]');
    if (activeElement) {
      activeElement.scrollIntoView({
        block: 'nearest',
        inline: 'nearest',
        behavior: 'smooth'
      });
    }
  }, [isMenuOpen, currentIndex]);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // –í–Ω–µ—à–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    if (interactionLockRef.current || animating) return;

    if (lockTargetIdRef.current) {
      if (activeId === lockTargetIdRef.current) {
        lockTargetIdRef.current = null;
        if (lockTimerRef.current) { clearTimeout(lockTimerRef.current); lockTimerRef.current = null; }
      } else {
        return;
      }
    }

    const targetIdx = clean.findIndex(it => it.id === activeId);
    if (targetIdx < 0) return;

    const s = stepF.current;
    let best = targetIdx;
    let bestDist = Infinity;
    for (let k = -1; k <= 1; k++) {
      const cand = targetIdx + k * N;
      const dist = Math.abs(cand - s);
      if (dist < bestDist) { bestDist = dist; best = cand; }
    }

    if (bestDist > 1e-3) {
      animateStepTo(best, snapDurationMs);
    }
  }, [activeId, clean, N, snapDurationMs, animating]);

  useEffect(() => () => {
    if (rafRef.current) cancelAnimationFrame(rafRef.current);
    if (lockTimerRef.current) clearTimeout(lockTimerRef.current);
    if (interactionTimerRef.current) clearTimeout(interactionTimerRef.current);
  }, []);

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // –û–∫–Ω–æ –∏–∫–æ–Ω–æ–∫
  const visibleIcons = useMemo(() => {
    const base = Math.floor(stepF.current);
    const arr = [];
    for (let offset = -2; offset <= 2; offset++) {
      const logicalStep = base + offset;
      const idx = ((logicalStep % N) + N) % N;
      const angle = center + (logicalStep - stepF.current) * step;
      arr.push({ key: `${clean[idx].id}:${logicalStep}`, idx, angle, logicalStep });
    }
    return arr;
  }, [stepFState, step, center, N, clean]);



  // –ì–µ–æ–º–µ—Ç—Ä–∏—è –¥–ª—è —Å–∫–∏–Ω–∞
  const base = Math.floor(stepF.current);
  const frac = stepF.current - base;
  const geometry = {
    size,
    radius,
    chipSize, // ‚Üê –ø—Ä–æ–±—Ä–æ—Å–∏–º –≤ —Å–∫–∏–Ω, —á—Ç–æ–±—ã –∫–∞–ø—Å—É–ª–∞ –∑–Ω–∞–ª–∞ –¥–∏–∞–º–µ—Ç—Ä —Å–ª–æ—Ç–∞
    center,
    stepDeg: step,
    stepF: stepF.current,
    base,
    frac,
    currentIndex,
    items: clean,
  };

  const skinImpl =
    skin === 'poker'
      ? pokerSkin
      : {
          beforeIcons: () => null,
          afterIcons: () => null,
          CenterLabelWrap: (_g, _p, children) => (
            <div className="bg-white/10 border border-white/15 rounded-full">{children}</div>
          ),
          decorateIcon: (node/*, ctx*/) => node,
        };




  // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø—É–Ω–∫—Ç–æ–≤: –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ —á–∞—Å–æ–≤–æ–π –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
  const compactItems = useMemo(() => {
    if (!clean.length) return [];
    const total = clean.length;
    const start = (currentIndex + 1 + total) % total;

    let ordered;
    if (compactOrder === 'clockwise') {
      ordered = Array.from({ length: total - 1 }, (_, i) => clean[(start + i) % total]);
    } else {
      // 'original' ‚Äî –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
      ordered = clean.filter((_, idx) => idx !== currentIndex);
    }

    if (Number.isFinite(compactMaxItems)) {
      return ordered.slice(0, compactMaxItems);
    }
    return ordered;
  }, [clean, currentIndex, compactOrder, compactMaxItems]);



  // –ë–∞–∑–∞: —Ü–µ–Ω—Ç—Ä –∫–æ–ª–µ—Å–∞ + labelOffset (–∫–∞–∫ —É –ø–æ–¥–ø–∏—Å–∏)
  const labelBaseTranslate =
    `translate(-50%, -50%) translate(${labelOffset.x || 0}px, ${labelOffset.y || 0}px)`;

  // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–ª—è compact
  const compactDir = useMemo(() => {
    if (compactDirection === 'auto') {
      // –µ—Å–ª–∏ –∫–æ–ª–µ—Å–æ –¥–æ–∫–Ω—É—Ç–æ —Å–Ω–∏–∑—É ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–≤–µ—Ä—Ö, —Å–≤–µ—Ä—Ö—É ‚Äî –≤–Ω–∏–∑
      return anchor.ty === +1 ? 'up' : 'down';
    }
    return compactDirection;
  }, [compactDirection, anchor]);

  // –ö–æ–º–ø–∞–∫—Ç: –æ—Ç –ø–∏–ª—é–ª–∏ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑ –Ω–∞ compactGutter
  const compactTranslate =
  `${labelBaseTranslate} translateY(${compactDir === 'up' ? -compactGutter : compactGutter}px)`;

  // –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º –¥–ª—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ ‚Äî –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫—Ä–∞—è –ø–∏–ª—é–ª–∏
  const accordionTranslate =
    `${labelBaseTranslate} translateY(${compactDir === 'up' ? -(labelH / 2 + compactGutter) : (labelH / 2 + compactGutter)}px)`;



  // ‚îÄ‚îÄ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –Ω–∞–±–æ—Ä –ø—É–Ω–∫—Ç–æ–≤, —á—Ç–æ –∏ compact)
  const accordionItems = compactItems;
  const accordionRows = Number.isFinite(compactMaxItems)
    ? Math.min(accordionItems.length, compactMaxItems)
    : accordionItems.length;
  const accordionListMaxH = accordionRows * (compactItemHeight || 40);



  const visibilityClass = hideOnDesktop ? 'sm:hidden' : '';


  const renderIcon = (it) => {
    if (it.icon) {
      return React.cloneElement(it.icon, {
        style: { width: iconSize, height: iconSize, ...(it.icon.props?.style || {}) },
        'aria-hidden': true,
      });
    }
    if (it.Icon) return <it.Icon style={{ width: iconSize, height: iconSize }} aria-hidden="true" />;
    return null;
  };

  // Early return after all hooks
  if (N === 0) return null;

  return (
    <div
      ref={rootRef}
      className={twMerge('fixed z-50 select-none pointer-events-auto', visibilityClass, anchor.corner, className)}
      style={{ width: size, height: size, transform: translate }}
      aria-hidden={false}
    >
      <div
        className={twMerge(
          'relative rounded-full',
          'bg-[--bg-1]/80 backdrop-blur-[var(--glass-blur)]',
          'border border-[--glass-border]',
          'shadow-[var(--shadow-m)]'
        )}
        style={{ width: size, height: size, overflow: 'visible' }}
      >

        {/* skin: —Ñ–æ–Ω/–æ–±–æ–¥/–∫–ª–∏–Ω—å—è –¥–æ –∏–∫–æ–Ω–æ–∫ */}
        {skinImpl.beforeIcons?.(geometry, skinProps)}

        {/* –ü–æ–¥–ø–∏—Å—å ‚Äî —á–µ—Ä–µ–∑ —Å–∫–∏–Ω (–æ–Ω –æ–±—Ä–∞–º–∏—Ç —Ü–µ–Ω—Ç—Ä–æ–º) */}
        {/* –¶–µ–Ω—Ç—Ä: –ª–∏–±–æ —Å—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞, –ª–∏–±–æ –Ω–æ–≤–∞—è ¬´–ø–∏–ª—é–ª—è-–∞–∫–∫–æ—Ä–¥–µ–æ–Ω¬ª */}
        {labelMenuVariant === 'accordion' ? (
          <div
            className="absolute left-1/2 top-1/2 z-[70]"
            style={{
              // –°–¥–≤–∏–≥–∞–µ–º –≤–ø—Ä–∞–≤–æ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã –∑–∞–∫—Ä—ã—Ç–æ–π –ø–∏–ª—é–ª–∏,
              // —á—Ç–æ–±—ã –µ—ë –ü–†–ê–í–û–ï —Ä–µ–±—Ä–æ ¬´—É–ø–∏—Ä–∞–ª–æ—Å—å¬ª –≤ –ø—Ä–µ–∂–Ω—é—é —Ç–æ—á–∫—É —Ü–µ–Ω—Ç—Ä–∞.
              // –ú–∏–Ω—É—Å 5px ‚Äî –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–æ—Ä–¥–µ—Ä —Å—Ç–µ–∫–ª—è–Ω–Ω–æ–π –∫–∞–ø—Å—É–ª—ã.
              // ‚ö†Ô∏è –ù–µ —É–¥–∞–ª—è–π—Ç–µ ¬´‚àí5¬ª: —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–∞—è –ø—Ä–∞–≤–∫–∞ –ø–æ–¥ —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã.
              transform: `translate(-50%, -50%) translate(${(labelOffset.x || 0) + (pillClosedMaxPx ? (pillClosedMaxPx / 2 - 5) : 0)}px, ${labelOffset.y || 0}px)`,
              pointerEvents: 'auto',
            }}
          >
            <AccordionPill
              key={`pill-${currentIndex}`}            // –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏
              items={clean.map(i => i.label)}
              initialIndex={currentIndex}
              icons={clean.map(i => i.icon ?? (i.Icon ? <i.Icon style={{ width: iconSize, height: iconSize }} aria-hidden="true" /> : null))}
              className=""
              onSelect={(idx) => {
                // —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –±—ã–ª–∞ –≤ handleMenuItemClick
                const s = stepF.current;
                let best = idx;
                let bestDist = Infinity;
                for (let k = -1; k <= 1; k++) {
                  const cand = idx + k * N;
                  const dist = Math.abs(cand - s);
                  if (dist < bestDist) { bestDist = dist; best = cand; }
                }
                snapTo(best);
              }}
              onOpenChange={setPillOpen}
              onMeasureClosedMax={(px) => {
                // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —á—Ç–æ–±—ã –Ω–µ –≥–æ–Ω—è—Ç—å setState –Ω–∞ —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                setPillClosedMaxPx(prev => (prev === px ? prev : px));
              }}
            />
          </div>
        ) : (
          /* —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π-–ª–µ–π–±–ª–æ–º –∏ –º–µ–Ω—é (panel/compact) –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */
          <div
            className="absolute left-1/2 top-1/2"
            style={{
              transform: `translate(-50%, -50%) translate(${labelOffset.x || 0}px, ${labelOffset.y || 0}px)`,
              pointerEvents: enableLabelMenu ? 'auto' : 'none',
            }}
            ref={menuRef}
          >
            {skinImpl.CenterLabelWrap
              ? skinImpl.CenterLabelWrap(
                  geometry,
                  skinProps,
                  enableLabelMenu ? (
                    <button
                      ref={labelRef}
                      type="button"
                      onClick={handleLabelClick}
                      className={twMerge(
                        'inline-flex items-center gap-2 px-3.5 py-2 rounded-full text-[--fg-strong]',
                        'cursor-pointer transition-colors',
                        'hover:bg-white/10 focus:outline-none focus:[box-shadow:var(--ring)]',
                        labelClassName
                      )}
                      aria-label={`Current section: ${clean[currentIndex]?.label}. Click to open section menu`}
                      aria-expanded={isMenuOpen}
                      aria-haspopup="menu"
                      aria-controls={menuId}
                    >
                      <span className="truncate">{clean[currentIndex]?.label}</span>
                    </button>
                  ) : (
                    <div className={twMerge('text-center px-4 py-2 rounded-full text-[--fg-strong]', labelClassName)}>
                      {clean[currentIndex]?.label}
                    </div>
                  )
                )
              : null}

            {/* panel / compact ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –±—ã–ª–∏ –Ω–∏–∂–µ */}
          </div>
        )}


        {/* –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ü–∏–π: panel | compact (accordion —É–∂–µ –≤—ã—à–µ) */}
        {enableLabelMenu && isMenuOpen && labelMenuVariant !== 'accordion' && (
          (() => {
            if (labelMenuVariant === 'panel') {
              return (
                <div
                  ref={labelMenuVariant !== 'accordion' ? menuRef : null}
                  id={menuId}
                  className={twMerge(
                    'absolute left-1/2 top-1/2 z-[60] w-56 pointer-events-auto font-ui-role',
                    'rounded-xl',
                    'bg-[--glass-bg] border border-[--glass-border]',
                    'backdrop-blur-[var(--glass-blur)] shadow-[var(--shadow-s)]',
                    'transition-opacity transition-transform duration-120 ease-out',
                    'opacity-100 scale-100',
                    'motion-reduce:transition-none'
                  )}
                  style={{
                    // —è–∫–æ—Ä–∏–º –ø–∞–Ω–µ–ª—å –∫ –Ω–∏–∂–Ω–µ–º—É –∫—Ä–∞—é –ø–∏–ª—é–ª–∏ (–∏–ª–∏ –≤–µ—Ä—Ö–Ω–µ–º—É, –µ—Å–ª–∏ –æ—Ç–∫—Ä–æ–µ–º –≤–Ω–∏–∑)
                    transform: `${labelBaseTranslate} translateY(${-(labelH / 2 + 10)}px)`,
                    maxHeight: menuMaxHeight,
                  }}
                  role="menu"
                  aria-label="Section selection menu"
                >
                  <div className="py-1 max-h-full overflow-y-auto">
                    {clean.map((item, idx) => {
                      const isActive = idx === currentIndex;
                      return (
                        <button
                          key={item.id}
                          type="button"
                          onClick={() => handleMenuItemClick(idx)}
                          data-active={isActive}
                          className={twMerge(
                            'w-full flex items-center gap-2 px-3 py-2 text-left',
                            'hover:bg-white/8 focus:bg-white/8 focus:outline-none focus:[box-shadow:var(--ring)]',
                            'transition-colors duration-75',
                            isActive ? 'bg-white/10 text-[--fg-strong] border-l border-[--gold]' : 'text-[--fg]'
                          )}
                          role="menuitem"
                          aria-current={isActive ? 'page' : undefined}
                        >
                          <div className="w-4 h-4 flex-shrink-0 grid place-items-center">
                            {renderIcon(item)}
                          </div>
                          <span className="flex-1 truncate">{item.label}</span>
                        </button>
                      );
                    })}
                  </div>
                </div>
              );
            }

            if (labelMenuVariant === 'compact') {
              return (
                <div
                  ref={labelMenuVariant !== 'accordion' ? menuRef : null}
                  id={menuId}
                  className={twMerge(
                    'absolute left-1/2 top-1/2 z-[60] pointer-events-auto font-ui-role',
                    'rounded-xl',
                    'bg-[--glass-bg] border border-[--glass-border]',
                    'backdrop-blur-[var(--glass-blur)] shadow-[var(--shadow-s)]',
                    'px-2 py-2',
                    'transition-opacity transition-transform duration-150 ease-out',
                    'opacity-100 scale-100',
                    'motion-reduce:transition-none'
                  )}
                  style={{ transform: compactTranslate }}
                  role="menu"
                  aria-label="Section selection menu (compact)"
                >
                  <div className="flex flex-col">
                    {compactItems.map((item) => (
                      <button
                        key={item.id}
                        type="button"
                        onClick={() => {
                          const idx = clean.findIndex(i => i.id === item.id);
                          handleMenuItemClick(idx);
                        }}
                        className={twMerge(
                          'flex items-center gap-2 px-3 py-1.5 rounded-md text-left',
                          'hover:bg-white/8 focus:bg-white/8 focus:outline-none focus:[box-shadow:var(--ring)]',
                          'transition-colors duration-75 text-[--fg]'
                        )}
                        role="menuitem"
                      >
                        <div className="w-4 h-4 flex-shrink-0 grid place-items-center">
                          {renderIcon(item)}
                        </div>
                        <span className="whitespace-nowrap">{item.label}</span>
                      </button>
                    ))}
                  </div>
                </div>
              );
            }

            // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ACCORDION ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            return (
              <div
                ref={menuRef}
                id={menuId}
                className="absolute left-1/2 top-1/2 z-[60] pointer-events-auto"
                style={{ transform: accordionTranslate }}
                role="menu"
                aria-label="Section selection menu (accordion)"
              >
                <div
                  className={twMerge(
                    'flex flex-col rounded-xl',
                    'bg-[--glass-bg] border border-[--glass-border]',
                    'backdrop-blur-[var(--glass-blur)] shadow-[var(--shadow-s)]',
                    'overflow-y-auto'
                  )}
                  style={{
                    maxHeight: accordionListMaxH,
                    minWidth: 'max(148px, fit-content)',
                  }}
                >
                  {accordionItems.map((item) => (
                    <button
                      key={item.id}
                      type="button"
                      onClick={() => {
                        const idx = clean.findIndex(i => i.id === item.id);
                        handleMenuItemClick(idx);
                      }}
                      className={twMerge(
                        'flex items-center gap-2 px-3 text-left',
                        'hover:bg-white/8 focus:bg-white/8 focus:outline-none focus:[box-shadow:var(--ring)]',
                        'transition-colors duration-75 text-[--fg]'
                      )}
                      role="menuitem"
                      style={{ height: compactItemHeight }}
                    >
                      <div className="w-4 h-4 flex-shrink-0 grid place-items-center">
                        {renderIcon(item)}
                      </div>
                      <span className="whitespace-nowrap">{item.label}</span>
                    </button>
                  ))}
                </div>
              </div>
            );
          })()
        )}


        {/* –ò–∫–æ–Ω–∫–∏ ‚Äî –±–µ—Å—à–æ–≤–Ω–∞—è –ª–µ–Ω—Ç–∞ c –¥–µ–∫–æ—Ä–∞—Ü–∏–µ–π —Å–∫–∏–Ω–∞ */}
        {visibleIcons.map(({ key, idx, angle, logicalStep }) => {
          const isActive = idx === currentIndex;

          const iconNode = (
            <div
              className={twMerge(
                'w-full h-full grid place-items-center rounded-full transition-transform',
                isActive ? 'scale-[1.06]' : ''
              )}
            >
              {renderIcon(clean[idx])}
            </div>
          );

          return (
            <button
              key={key}
              type="button"
              onClick={() => { if (!animating && !draggingRef.current) snapTo(logicalStep); }}
              className={twMerge(
                'absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2',
                'rounded-full text-[--fg]',
                isActive ? 'shadow-[var(--shadow-s)]' : ''
              )}
              style={{
                transform: `translate(-50%, -50%) rotate(${angle}deg) translate(${radius}px) rotate(${-angle}deg)`,
                width: chipSize,
                height: chipSize,
                pointerEvents: 'auto',
                willChange: 'transform',
              }}
              aria-current={isActive ? 'page' : undefined}
              aria-label={clean[idx].label}
              title={clean[idx].label}
            >
              {skinImpl.decorateIcon
                ? skinImpl.decorateIcon(iconNode, { isActive, geometry, skinProps })
                : iconNode}
            </button>
          );
        })}

        {/* skin: –ø–æ–≤–µ—Ä—Ö –∏–∫–æ–Ω–æ–∫ */}
        {skinImpl.afterIcons?.(geometry, skinProps)}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –¥—Ä–∞–≥–µ (–≤ poker-—Å–∫–∏–Ω–µ –Ω–µ –Ω—É–∂–µ–Ω) */}
        {showDragIndicator && draggingRef.current && startedRef.current && skin !== 'poker' && (
          <div
            className="pointer-events-none absolute inset-0 rounded-full"
            style={{
              background: `conic-gradient(from ${center - 45}deg,
                transparent,
                rgba(212,175,55,0.12) ${center - 20}deg,
                rgba(212,175,55,0.22) ${center}deg,
                rgba(212,175,55,0.12) ${center + 20}deg,
                transparent)`
            }}
            aria-hidden
          />
        )}
      </div>
    </div>
  );
}

export default FloatingChipWheel;
