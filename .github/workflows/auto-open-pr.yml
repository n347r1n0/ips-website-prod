name: Auto open/update PR on branch push

on:
  push:
    branches:
      - 'feat/**'
      - 'fix/**'
      - 'chore/**'
      - 'refactor/**'

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: pr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  open-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Read PR meta (title/body)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          title=""
          body=""
          if [[ -f ".github/pr.md" ]]; then
            title="$(sed -n 's/^# \+\(.*\)$/\1/p' .github/pr.md | head -n1)"
            awk 'f{print} /^# /{f=1}' .github/pr.md | tail -n +2 > /tmp/pr_body.md || true
            body="$(cat /tmp/pr_body.md || true)"
          else
            [[ -f ".github/pr-title.txt" ]] && title="$(cat .github/pr-title.txt)"
            [[ -f ".github/pr-body.md"  ]] && body="$(cat .github/pr-body.md)"
          fi
          [[ -z "$title" ]] && title="$(git log -1 --pretty=%s)"
          [[ -z "$body"  ]] && body=$'Auto-opened PR on push.\n\nBranch: '"${GITHUB_REF#refs/heads/}"
          has_meta=0
          if [[ -f ".github/pr.md" || -f ".github/pr-title.txt" || -f ".github/pr-body.md" ]]; then
            has_meta=1
          fi
          {
            echo "title<<EOF"; echo "$title"; echo "EOF"
            echo "body<<EOF";  echo "$body";  echo "EOF"
            echo "has_meta=$has_meta"
          } >> "$GITHUB_OUTPUT"

      - name: Warn if title not Conventional Commit (non-blocking)
        run: |
          title="${{ steps.meta.outputs.title }}"
          if ! echo "$title" | grep -Eq '^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([^)]+\))?: .+'; then
            echo "::warning::PR title is not Conventional Commit: '$title'"
          fi

      # Detect PAT presence safely for later if-conditions
      - name: Detect PAT presence
        id: auth
        env:
          AUTO_PR_TOKEN: ${{ secrets.AUTO_PR_TOKEN }}
        run: |
          if [ -n "$AUTO_PR_TOKEN" ]; then
            echo "has_pat=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_pat=false" >> "$GITHUB_OUTPUT"
          fi

      # ── Create/update PR using PAT (author = you)
      - name: Create or update PR (author = me via PAT)
        if: ${{ steps.auth.outputs.has_pat == 'true' }}
        id: pr_pat
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AUTO_PR_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const head  = context.ref.replace('refs/heads/','');
            const base  = process.env.PR_BASE || 'main';
            const title = (process.env.PR_TITLE || '').trim() || '(no title)';
            const body  = (process.env.PR_BODY  || '').trim() || `Auto-opened PR\n\nBranch: ${head}`;
            const hasMeta = process.env.HAS_META === '1';

            const { data: existing } = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`, base
            });

            if (existing.length > 0) {
              const pr = existing[0];
              if (!hasMeta) {
                core.info('PR exists; no meta -> keep title/body.');
                core.setOutput('number', pr.number.toString());
                return;
              }
              await github.rest.pulls.update({ owner, repo, pull_number: pr.number, title, body });
              core.setOutput('number', pr.number.toString());
              return;
            }

            const { data: pr } = await github.rest.pulls.create({
              owner, repo, head, base, title, body, draft: false
            });
            core.setOutput('number', pr.number.toString());
        env:
          PR_TITLE: ${{ steps.meta.outputs.title }}
          PR_BODY:  ${{ steps.meta.outputs.body }}
          PR_BASE:  ${{ vars.PR_BASE || 'main' }}
          HAS_META: ${{ steps.meta.outputs.has_meta }}

      # ── Bot fallback
      - name: Create or update PR (bot fallback)
        if: ${{ steps.auth.outputs.has_pat != 'true' }}
        id: pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const head  = context.ref.replace('refs/heads/','');
            const base  = process.env.PR_BASE || 'main';
            const title = (process.env.PR_TITLE || '').trim() || '(no title)';
            const body  = (process.env.PR_BODY  || '').trim() || `Auto-opened PR\n\nBranch: ${head}`;
            const hasMeta = process.env.HAS_META === '1';

            const { data: existing } = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`, base
            });

            if (existing.length > 0) {
              const pr = existing[0];
              if (!hasMeta) {
                core.info('PR exists; no meta -> keep title/body.');
                core.setOutput('number', pr.number.toString());
                return;
              }
              await github.rest.pulls.update({ owner, repo, pull_number: pr.number, title, body });
              core.setOutput('number', pr.number.toString());
              return;
            }

            const { data: pr } = await github.rest.pulls.create({
              owner, repo, head, base, title, body, draft: false
            });
            core.setOutput('number', pr.number.toString());
        env:
          PR_TITLE: ${{ steps.meta.outputs.title }}
          PR_BODY:  ${{ steps.meta.outputs.body }}
          PR_BASE:  ${{ vars.PR_BASE || 'main' }}
          HAS_META: ${{ steps.meta.outputs.has_meta }}

      - name: Optionally add labels/reviewers from .github/pr-meta.json
        if: ${{ hashFiles('.github/pr-meta.json') != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const meta = JSON.parse(fs.readFileSync('.github/pr-meta.json','utf8'));
            const number = Number(process.env.NUMBER);
            const owner  = context.repo.owner;
            const repo   = context.repo.repo;

            if (Array.isArray(meta.labels) && meta.labels.length) {
              await github.rest.issues.addLabels({ owner, repo, issue_number: number, labels: meta.labels });
            }
            if (Array.isArray(meta.reviewers) && meta.reviewers.length) {
              await github.rest.pulls.requestReviewers({ owner, repo, pull_number: number, reviewers: meta.reviewers });
            }
        env:
          NUMBER: ${{ steps.pr_pat.outputs.number || steps.pr.outputs.number }}

      - name: Cleanup PR meta files (optional via repo variable)
        if: ${{ vars.CLEANUP_PR_META == 'true' }}
        run: |
          set -e
          rm -f .github/pr.md .github/pr-title.txt .github/pr-body.md .github/pr-meta.json || true
          if git diff --quiet; then
            echo "No meta files to clean."
            exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore(pr): remove PR meta after PR #${{ steps.pr_pat.outputs.number || steps.pr.outputs.number }} [skip ci]"
          git push origin "${GITHUB_REF#refs/heads/}"
