name: Codex Review Prep

on:
  pull_request:
    types: [opened, ready_for_review, synchronize, reopened]
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: codex-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  label-and-ping:
    runs-on: ubuntu-latest
    steps:
      - name: Add review label
        if: ${{ !github.event.pull_request.draft && !github.event.pull_request.head.repo.fork }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: codex:review

      - name: Request reviewers (from pr-meta.json or repo var)
        if: ${{ !github.event.pull_request.draft }}
        uses: actions/github-script@v7
        env:
          CODEX_REVIEWERS: ${{ vars.CODEX_REVIEWERS }} # comma-separated, e.g. "user1,user2"
        with:
          script: |
            const fs = require('fs');
            const owner  = context.repo.owner;
            const repo   = context.repo.repo;
            const number = context.payload.pull_request.number;

            // Collect reviewers from .github/pr-meta.json (if present)
            let reviewers = [];
            try {
              const raw = fs.readFileSync('.github/pr-meta.json', 'utf8');
              const meta = JSON.parse(raw);
              if (Array.isArray(meta.reviewers)) {
                reviewers = reviewers.concat(meta.reviewers.map(s => String(s).trim().replace(/^@+/, '')).filter(Boolean));
              }
            } catch (_) { /* no meta file — ignore */ }

            // Collect reviewers from repo var
            const fromVar = (process.env.CODEX_REVIEWERS || '')
              .split(',')
              .map(s => s.trim().replace(/^@+/, ''))
              .filter(Boolean);

            reviewers = [...new Set([...reviewers, ...fromVar])];

            if (reviewers.length === 0) {
              core.info('No reviewers configured; skipping requestReviewers.');
            } else {
              await github.rest.pulls.requestReviewers({ owner, repo, pull_number: number, reviewers });
              core.info(`Requested reviewers: ${reviewers.join(', ')}`);
            }

      - name: Ping Codex to review (commit-aware)
        if: ${{ !github.event.pull_request.draft }}
        uses: actions/github-script@v7
        with:
          script: |
            const owner  = context.repo.owner;
            const repo   = context.repo.repo;
            const number = context.payload.pull_request.number;

            const markerBase = '[[CODEX-REVIEW-PING]]';
            const sha = context.payload.pull_request.head.sha.slice(0, 12);
            const marker = `${markerBase}@${sha}`;

            // Read comments
            const { data: comments } = await github.rest.issues.listComments({
              owner, repo, issue_number: number, per_page: 100
            });

            const isPingForSha = c => c.user?.type === 'Bot' && c.body && c.body.includes(marker);
            const isAnyPing    = c => c.user?.type === 'Bot' && c.body && c.body.includes(markerBase);

            const current = comments.find(isPingForSha);
            const oldPings = comments.filter(isAnyPing).filter(c => !isPingForSha(c));

            if (current) {
              core.info(`Codex ping already exists for ${sha} — skip.`);
              return;
            }

            const body = [
              marker,
              '@codex review',
              'Codex, please review this PR per your system rules and the pinned task context.',
              `• PR: #${number} — "${context.payload.pull_request.title}"`,
              `• Branch: ${context.payload.pull_request.head.ref}`,
              `• Head: ${sha}`,
              'Use the repository CODEX.md + the PR\'s pinned brief for scope/criteria.'
            ].join('\n');

            const { data: created } = await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            core.info(`Created Codex ping ${created.id} for ${sha}.`);

            // Clean up previous pings so the thread stays tidy
            for (const c of oldPings) {
              try {
                await github.rest.issues.deleteComment({ owner, repo, comment_id: c.id });
                core.info(`Deleted old Codex ping ${c.id}.`);
              } catch { /* ignore */ }
            }

  build-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - run: npm ci
      - run: npm run build
        env:
          CI: "true"

      - name: Upload preview artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Bundle size summary
        run: |
          du -sh dist || true
          find dist -type f -maxdepth 2 | wc -l || true
