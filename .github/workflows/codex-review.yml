name: Codex Review Prep

on:
  pull_request:
    types: [opened, ready_for_review, synchronize, reopened]
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: codex-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  label-and-ping:
    runs-on: ubuntu-latest
    steps:
      - name: Add review label
        if: ${{ !github.event.pull_request.draft && !github.event.pull_request.head.repo.fork }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: codex:review

      - name: Request reviewers (from pr-meta.json or repo var)
        if: ${{ !github.event.pull_request.draft }}
        uses: actions/github-script@v7
        env:
          CODEX_REVIEWERS: ${{ vars.CODEX_REVIEWERS }} # comma-separated, e.g. "your-codex-bot,co-reviewer"
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const number = context.payload.pull_request.number;

            let reviewers = [];
            try {
              const raw = fs.readFileSync('.github/pr-meta.json','utf8');
              const meta = JSON.parse(raw);
              if (Array.isArray(meta.reviewers)) {
                reviewers = reviewers.concat(meta.reviewers.map(s => String(s).trim()).filter(Boolean));
              }
            } catch (_) { /* no meta file */ }

            const fromVar = (process.env.CODEX_REVIEWERS || '')
              .split(',')
              .map(s => s.trim())
              .filter(Boolean);

            reviewers = [...new Set([...reviewers, ...fromVar])];

            if (reviewers.length === 0) {
              core.info('No reviewers configured; skipping requestReviewers.');
            } else {
              await github.rest.pulls.requestReviewers({ owner, repo, pull_number: number, reviewers });
              core.info(`Requested reviewers: ${reviewers.join(', ')}`);
            }

      - name: Ping Codex to review (idempotent)
        if: ${{ !github.event.pull_request.draft }}
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const number = context.payload.pull_request.number;
            const marker = '[[CODEX-REVIEW-PING]]';

            // Read comments
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const existing = comments.find(c => c.user?.type === 'Bot' && c.body && c.body.includes(marker));

            // If a proper ping already exists — skip
            if (existing && existing.body.includes('@codex review')) {
              core.info('Ping with marker + @codex review already present — skipping.');
              return;
            }

            // Always create a NEW comment to fire the connector
            const body = [
              marker,
              '@codex review',
              'Codex, please review this PR per your system rules and the pinned task context.',
              `• PR: #${number} — "${context.payload.pull_request.title}"`,
              `• Branch: ${context.payload.pull_request.head.ref}`,
              'Use the repository CODEX.md + the PR\'s pinned brief for scope/criteria.'
            ].join('\n');

            const { data: created } = await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
            core.info(`Created ping comment ${created.id} with @codex review trigger.`);

            // Optional tidy-up: remove legacy ping without trigger
            if (existing && !existing.body.includes('@codex review')) {
              try {
                await github.rest.issues.deleteComment({ owner, repo, comment_id: existing.id });
                core.info(`Deleted legacy ping ${existing.id} (no trigger).`);
              } catch { core.info('Could not delete legacy ping — ignore.'); }
            }

      - name: Ping Codex to review
        if: false
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Codex, please review this PR per your system rules and the pinned task context.
            • PR: #${{ github.event.pull_request.number }} — "${{ github.event.pull_request.title }}"
            • Branch: ${{ github.event.pull_request.head.ref }}
            Use the repository CODEX.md + the PR's pinned brief for scope/criteria.

  build-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - run: npm ci
      - run: npm run build
        env:
          CI: "true"

      - name: Upload preview artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Bundle size summary
        run: |
          du -sh dist || true
          find dist -type f -maxdepth 2 | wc -l || true
